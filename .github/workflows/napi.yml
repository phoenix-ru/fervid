name: Build NAPI

env:
  DEBUG: napi:*
  APP_NAME: fervid
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_INCREMENTAL: '1'
  WORKING_DIR_PATH: ${{ github.workspace }}/crates/fervid_napi
  CI: true

'on':
  push:
    branches:
      - master
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: './crates/fervid_napi'

jobs:
  # build:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       settings:
  #         - host: windows-latest
  #           build: yarn build
  #           target: x86_64-pc-windows-msvc

  #         - host: ubuntu-latest
  #           target: x86_64-unknown-linux-gnu
  #           docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
  #           build: |
  #             set -e &&
  #             corepack enable &&
  #             yarn build --target x86_64-unknown-linux-gnu &&
  #             strip *.node

  #         - host: ubuntu-latest
  #           target: x86_64-unknown-linux-musl
  #           docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
  #           build: |
  #             set -e &&
  #             corepack enable &&
  #             yarn build &&
  #             strip *.node

  #         - host: macos-latest
  #           target: x86_64-apple-darwin
  #           build: |
  #             corepack enable && yarn build
  #             strip -x *.node

  #         - host: macos-latest
  #           target: aarch64-apple-darwin
  #           build: |
  #             sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
  #             export CC=$(xcrun -f clang);
  #             export CXX=$(xcrun -f clang++);
  #             SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
  #             export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
  #             rustup target add aarch64-apple-darwin
  #             yarn build --target aarch64-apple-darwin
  #             strip -x *.node

  #   defaults:
  #     run:
  #       working-directory: ${{ env.WORKING_DIR_PATH }}
  #   name: stable - ${{ matrix.settings.target }} - node@18
  #   runs-on: ${{ matrix.settings.host }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       if: ${{ !matrix.settings.docker }}
  #       with:
  #         node-version: 18
  #         # cache: yarn
  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@stable
  #       if: ${{ !matrix.settings.docker }}
  #       with:
  #         toolchain: stable
  #         targets: ${{ matrix.settings.target }}
  #     - name: Cache cargo
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           .cargo-cache
  #           target/
  #         key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
  #     - uses: goto-bus-stop/setup-zig@v2
  #       if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
  #       with:
  #         version: 0.11.0
  #     - name: Setup toolchain
  #       run: ${{ matrix.settings.setup }}
  #       if: ${{ matrix.settings.setup }}
  #       shell: bash
  #     - name: Setup node x86
  #       if: matrix.settings.target == 'i686-pc-windows-msvc'
  #       run: yarn config set supportedArchitectures.cpu "ia32"
  #       shell: bash
  #     - name: Install dependencies
  #       run: corepack enable; yarn install
  #     - name: Setup node x86
  #       uses: actions/setup-node@v4
  #       if: matrix.settings.target == 'i686-pc-windows-msvc'
  #       with:
  #         node-version: 18
  #         # cache: yarn
  #         architecture: x86
  #     - name: Build in docker
  #       uses: addnab/docker-run-action@v3
  #       if: ${{ matrix.settings.docker }}
  #       with:
  #         image: ${{ matrix.settings.docker }}
  #         options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build/crates/fervid_napi'
  #         run: ${{ matrix.settings.build }}
  #     - name: Build
  #       run: ${{ matrix.settings.build }}
  #       if: ${{ !matrix.settings.docker }}
  #       shell: bash
  #     - name: List directory before upload
  #       run: ls -a
  #       shell: bash
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: bindings-${{ matrix.settings.target }}
  #         path: ${{ env.WORKING_DIR_PATH }}/${{ env.APP_NAME }}.*.node
  #         if-no-files-found: error

  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: yarn build --target x86_64-apple-darwin
          - host: windows-latest
            build: yarn build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: yarn build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: yarn build --target x86_64-unknown-linux-gnu --use-napi-cross
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: yarn build --target x86_64-unknown-linux-musl -x
          - host: macos-latest
            target: aarch64-apple-darwin
            build: yarn build --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: yarn build --target aarch64-unknown-linux-gnu --use-napi-cross
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: yarn build --target armv7-unknown-linux-gnueabihf --use-napi-cross
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: yarn build --target aarch64-linux-android
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: yarn build --target armv7-linux-androideabi
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: yarn build --target aarch64-unknown-linux-musl -x
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build --target aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: wasm32-wasip1-threads
            build: yarn build --target wasm32-wasip1-threads
    name: stable - ${{ matrix.settings.target }} - node@22
    runs-on: ${{ matrix.settings.host }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_PATH }}
    steps:
      - uses: actions/checkout@v5
      # Windows needs double setup-node due to corepack
      - name: Setup node
        if: ${{ contains(matrix.settings.host, 'windows') }}
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Enable Corepack
        run: corepack enable
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
          cache-dependency-path: ${{ env.WORKING_DIR_PATH }}/yarn.lock
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          # Sync with rust-toolchain.toml
          # toolchain: stable
          toolchain: nightly-2025-04-16
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.napi-rs
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: mlugg/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.14.1
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            ${{ env.WORKING_DIR_PATH }}/${{ env.APP_NAME }}.*.node
            ${{ env.WORKING_DIR_PATH }}/${{ env.APP_NAME }}.*.wasm
          if-no-files-found: error

  # test-macOS-windows-binding:
  #   name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       settings:
  #         - host: macos-latest
  #           target: x86_64-apple-darwin
  #         - host: windows-latest
  #           target: x86_64-pc-windows-msvc
  #       node:
  #         - '18'
  #         - '20'
  #   defaults:
  #     run:
  #       working-directory: ${{ env.WORKING_DIR_PATH }}
  #   runs-on: ${{ matrix.settings.host }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node }}
  #         # cache: yarn
  #     - name: Install dependencies
  #       run: corepack enable; yarn install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: bindings-${{ matrix.settings.target }}
  #         path: ${{ env.WORKING_DIR_PATH }}
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: yarn test

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            architecture: x64
          - host: windows-11-arm
            target: aarch64-pc-windows-msvc
            architecture: arm64
          - host: macos-latest
            target: aarch64-apple-darwin
            architecture: arm64
          - host: macos-latest
            target: x86_64-apple-darwin
            architecture: x64
        node:
          - '20'
          - '22'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v5
      # Windows needs double setup-node due to corepack
      - name: Setup node
        if: ${{ contains(matrix.settings.host, 'windows') }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: Enable Corepack
        run: corepack enable
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: ${{ env.WORKING_DIR_PATH }}/yarn.lock
          architecture: ${{ matrix.settings.architecture }}
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.WORKING_DIR_PATH }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: yarn test

  # test-linux-x64-gnu-binding:
  #   name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - '18'
  #         - '20'
  #   defaults:
  #     run:
  #       working-directory: ${{ env.WORKING_DIR_PATH }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node }}
  #         # cache: yarn
  #     - name: Install dependencies
  #       run: corepack enable; yarn install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: bindings-x86_64-unknown-linux-gnu
  #         path: ${{ env.WORKING_DIR_PATH }}
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: docker run --rm -e CI=true -v $(pwd):/build -w /build node:${{ matrix.node }}-slim sh -c "corepack enable && yarn test"

  test-linux-binding:
    name: Test bindings on ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-gnueabihf
        node:
          - '20'
          - '22'
    runs-on: ${{ contains(matrix.target, 'aarch64') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v5
      - name: Enable Corepack
        run: corepack enable
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: ${{ env.WORKING_DIR_PATH }}/yarn.lock
      - name: Output docker params
        id: docker
        run: |
          node -e "
            if ('${{ matrix.target }}'.startsWith('aarch64')) {
              console.log('PLATFORM=linux/arm64')
            } else if ('${{ matrix.target }}'.startsWith('armv7')) {
              console.log('PLATFORM=linux/arm/v7')
            } else {
              console.log('PLATFORM=linux/amd64')
            }
          " >> $GITHUB_OUTPUT
          node -e "
            if ('${{ matrix.target }}'.endsWith('-musl')) {
              console.log('IMAGE=node:${{ matrix.node }}-alpine')
            } else {
              console.log('IMAGE=node:${{ matrix.node }}-slim')
            }
          " >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: |
          yarn config set --json supportedArchitectures.cpu '["current", "arm64", "x64", "arm"]'
          yarn config set --json supportedArchitectures.libc '["current", "musl", "gnu"]'
          yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.target }}
          path: ${{ env.WORKING_DIR_PATH }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ contains(matrix.target, 'armv7') }}
        with:
          platforms: all
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: ${{ contains(matrix.target, 'armv7') }}
      - name: Test bindings
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.docker.outputs.IMAGE }}
          options: -v ${{ env.WORKING_DIR_PATH }}:/build -w /build -e CI=true --platform ${{ steps.docker.outputs.PLATFORM }}
          run: corepack enable && yarn test

  test-wasi:
    name: Test WASI target
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Enable Corepack
        run: corepack enable
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
          cache-dependency-path: ${{ env.WORKING_DIR_PATH }}/yarn.lock
      - name: Install dependencies
        run: |
          yarn config set --json supportedArchitectures.cpu '["current", "wasm32", "x64"]'
          yarn config set --json supportedArchitectures.libc '["current", "musl", "gnu"]'
          yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-wasm32-wasip1-threads
          path: ${{ env.WORKING_DIR_PATH }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: yarn test
        env:
          NAPI_RS_FORCE_WASI: 1

  publish:
    name: Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    needs:
      - test-macOS-windows-binding
      - test-linux-binding
      - test-wasi
    steps:
      - uses: actions/checkout@v5
      - name: Enable Corepack
        run: corepack enable
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
          cache-dependency-path: ${{ env.WORKING_DIR_PATH }}/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Create npm dirs
        run: yarn napi create-npm-dirs
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: ${{ env.WORKING_DIR_PATH }}/artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^@fervid/napi@[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^@fervid/napi@[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
